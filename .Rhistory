alcohol[alcohol$abuse == 0&alcohol$employ==1, ]
alcohol$abuse == 0&alcohol$employ==1
alcohol[alcohol$abuse == 0&alcohol$employ==1,employ]
alcohol[alcohol$abuse == 0&alcohol$employ==1,alcohol$employ]
#Estime a equação de regressão simples e relate suas estimativas para b0 e b1.
#Interprete essas estimativas, incluindo uma discussão das magnitudes.
lm <- lm(colGPA ~ PC ,data=gpa1);lm
#colgpa = 2.9894 + 0.1695*PC
#^b0: quando o pc = 0, colgpa=2.9894
#^b1: quando o aluno tiver pc(pc=1), a media aumenta em 0.1695, em oposição a
# nao disponibilidade do pc
#Para um aluno que tem pc, o aumento da média é relativamente pequeno
summary(lm)
#Run the simple regression of math4 on pctsgle and report the results in the usual format.
lm <-lm(math4 ~ pctsgle, data=meapsingle); lm
# Como clean_title tem alata correlação com acidente:
install.packages("nnet")
# Como clean_title tem alata correlação com acidente:
library('nnet')
data<-read.csv('data_d.csv')
setwd('C:/Users/Utilizador/OneDrive - Universidade do Minho/2-ano/aprendizage_automatica')
data<-read.csv('data_d.csv')
# Como clean_title tem alata correlação com acidente:
library('nnet')
model <- multinom(accident ~ clean_title, data =data)
summary(model)
table(fuel_type)
attach(data)
table(fuel_type)
classe1<- sum(fuel_type == 'Diesel')
classe2<- sum(fuel_type == 'E85 Flex Fuel')
classe3<- sum(fuel_type == 'Gasoline')
classe4<- sum(fuel_type == 'Hybrid')
classe5<- sum(fuel_type == 'not supported')
classe6<- sum(fuel_type == 'Plug-In Hybrid')
pi_est <-c(1/6,1/6,1/6,1/6,1/6,1/6)
chisq.test(c(classe1,classe2,classe3,classe4,classe5,classe6), p=pi_est)
pi <-c(1/8,1/8,1/8,1/8,1/8,1/8,1/8,1/8)
chisq.test(table(fuel_type), p=pi)
# Para acidente:
table(accident)
p<- c(1/3,1/3,1/3)
chisq.test(table(accident), p=p)
data[model]
[data[model]]
data<-read.csv('data_tratado.csv')
v<-data[brand]
attach(data)
v<-data[brand];v
v<-data[brand, ];v
table(brand)
table(brand, year == 1993)
table(brand)
table(brand, model_year == 1993)
library(dplyr)
print(agrupado)
agrupado <- dados %>%
group_by(marca, modelo) %>%
summarise(n = n())
agrupado <- data %>%
group_by(marca, modelo) %>%
summarise(n = n())
agrupado <- data %>%
group_by(brand, model) %>%
summarise(n = n())
print(agrupado)
agrupado <- data %>%
group_by(brand) %>%
summarise(total_modelos = n_distinct(model))
print(agrupado)
library(ggplot2)
soma_modelos_por_marca <- data %>%
group_by(brand) %>%
summarise(total_modelos = n_distinct(model))
grafico <- ggplot(soma_modelos_por_marca, aes(x = marca, y = total_modelos)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Total de Modelos por Marca", x = "Marca", y = "Total de Modelos")
# Exibir o gráfico
print(grafico)
grafico <- ggplot(soma_modelos_por_marca, aes(x = brand, y = total_modelos)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Total de Modelos por Marca", x = "Marca", y = "Total de Modelos")
# Exibir o gráfico
print(grafico)
grafico <- ggplot(soma_modelos_por_marca, aes(x = totak_modelos, y = brand)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Total de Modelos por Marca", x = "Marca", y = "Total de Modelos")
# Exibir o gráfico
print(grafico)
grafico <- ggplot(soma_modelos_por_marca, aes(x = total_modelos, y = brand)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Total de Modelos por Marca", x = "Marca", y = "Total de Modelos")
# Exibir o gráfico
print(grafico)
grafico <- ggplot(soma_modelos_por_marca, aes(x = total_modelos, y = brand)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Número de Modelos por Marca", x = "Nº de modelos", y = "Marca")
# Exibir o gráfico
print(grafico)
soma_modelos_por_marca_media_mediana_preco <- data %>%
group_by(brand) %>%
summarise(total_modelos = n_distinct(model),
media_preco = mean(price),
mediana_preco = median(price))
grafico <- ggplot(soma_modelos_por_marca_media_mediana_preco, aes(x = total_modelos, y = brand)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Número de Modelos por Marca", x = "Nº de modelos", y = "Marca") +
geom_text(aes(label = paste("Média:", media_preco, "\n", "Mediana:", mediana_preco)),
vjust = -0.5, size = 3)
# Exibir o gráfico
print(grafico)
soma_modelos_por_marca_media_mediana_preco <- data %>%
group_by(brand) %>%
summarise(total_modelos = n_distinct(model),
round(media_preco = mean(price),1),
round(mediana_preco = median(price),1)
soma_modelos_por_marca_media_mediana_preco <- data %>%
soma_modelos_por_marca_media_mediana_preco <- data %>%
group_by(brand) %>%
summarise(total_modelos = n_distinct(model),
media_preco = round(mean(price),1),
mediana_preco = round(median(price),1)
soma_modelos_por_marca_media_mediana_preco
soma_modelos_por_marca_media_mediana_preco <- data %>%
group_by(brand) %>%
summarise(total_modelos = n_distinct(model),
media_preco = round(mean(price),1),
mediana_preco = round(median(price),1))
soma_modelos_por_marca_media_mediana_preco
library(plotly)
grafico <- ggplot(soma_modelos_por_marca_media_mediana_preco, aes(x = total_modelos, y = brand)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Número de Modelos por Marca", x = "Nº de modelos", y = "Marca") +
geom_text(aes(label = paste("Média:", media_preco, "\n", "Mediana:", mediana_preco)),
vjust = -0.5, size = 3)
grafico_interativo <- ggplotly(grafico)
grafico_interativo
grafico <- ggplot(soma_modelos_por_marca, aes(x = marca, y = total_modelos,
text = paste("Média:", media_preco, "<br>",
"Mediana:", mediana_preco))) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Total de Modelos por Marca", x = "Marca", y = "Total de Modelos") +
geom_text(aes(label = total_modelos), vjust = -0.5, size = 3)
# Converter para um gráfico interativo com plotly
grafico_interativo <- ggplotly(grafico, tooltip = "text")
soma_modelos_por_marca_media_mediana_preco <- data %>%
group_by(brand) %>%
summarise(total_modelos = n_distinct(model),
media_preco = round(mean(price),1),
mediana_preco = round(median(price),1))
soma_modelos_por_marca_media_mediana_preco
grafico <- ggplot(soma_modelos_por_marca_media_mediana_preco, aes(x = total_modelos, y = brand)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Número de Modelos por Marca", x = "Nº de modelos", y = "Marca")
grafico_interativo <- ggplotly(grafico)
soma_modelos_por_marca_media_mediana_preco <- data %>%
group_by(brand) %>%
summarise(total_modelos = n_distinct(model),
media_preco = round(mean(price),1),
mediana_preco = round(median(price),1))
soma_modelos_por_marca_media_mediana_preco
grafico <- ggplot(soma_modelos_por_marca_media_mediana_preco, aes(x = total_modelos, y = brand)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Número de Modelos por Marca", x = "Nº de modelos", y = "Marca")
grafico_interativo <- ggplotly(grafico)
grafico_interativo <- ggplotly(grafico)
soma_modelos_por_marca_media_mediana_preco <- data %>%
group_by(brand) %>%
summarise(total_modelos = n_distinct(model))
#media_preco = round(mean(price),1),
#mediana_preco = round(median(price),1))
soma_modelos_por_marca_media_mediana_preco
grafico <- ggplot(soma_modelos_por_marca_media_mediana_preco, aes(x = total_modelos, y = brand)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Número de Modelos por Marca", x = "Nº de modelos", y = "Marca")
grafico
ggploty(grafico)
ggplotly(grafico)
media_mediana_por_marca
media_mediana_por_marca <- data %>%
group_by(brand) %>%
summarise(media_preco = round(mean(price),1),
mediana_preco = round(median(price),1)))
media_mediana_por_marca <- data %>%
group_by(brand) %>%
summarise(media_preco = round(mean(price),1),
mediana_preco = round(median(price),1))
media_mediana_por_marca
media_mediana_por_marca <- data %>%
group_by(brand) %>%
summarise(media_preco = round(mean(price),2),
mediana_preco = round(median(price),2))
media_mediana_por_marca
boxplot_por_marca <- ggplot(data, aes(x = marca, y = price, fill = marca)) +
geom_boxplot() +
labs(title = "Boxplot de Preço por Marca", x = "Marca", y = "Preço") +
theme_minimal()
print(boxplot_por_marca)
boxplot_por_marca <- ggplot(data, aes(x = brand, y = price, fill = marca)) +
geom_boxplot() +
labs(title = "Boxplot de Preço por Marca", x = "Marca", y = "Preço") +
theme_minimal()
print(boxplot_por_marca)
boxplot_por_marca <- ggplot(data, aes(x = brand, y = price, fill = brand)) +
geom_boxplot() +
labs(title = "Boxplot de Preço por Marca", x = "Marca", y = "Preço") +
theme_minimal()
print(boxplot_por_marca)
boxplot_por_marca <- ggplot(data, aes(x = price, y = brand, fill = brand)) +
geom_boxplot() +
labs(title = "Boxplot de Preço por Marca", x = "Marca", y = "Preço") +
theme_minimal()
print(boxplot_por_marca)
boxplot_por_marca <- ggplot(data, aes(x = price, y = brand, fill = brand)) +
geom_boxplot() +
labs(title = "Boxplot de Preço por Marca", x = "Marca", y = "Preço") +
theme_minimal() +
scale_y_continuous(trans = "log10", labels = scales::comma)
print(boxplot_por_marca)
str(dados)
str(data)
boxplot_por_marca <- ggplot(data, aes(x = price, y = brand, fill = brand)) +
geom_boxplot() +
labs(title = "Boxplot de Preço por Marca", x = "Preço", y = "Marca") +
theme_minimal() +
scale_y_continuous(trans = "log10", labels = scales::comma)
ggplotly(boxplot_por_marca)
boxplot_por_marca <- ggplot(data, aes(x = price, y = brand, fill = brand)) +
geom_boxplot() +
labs(title = "Boxplot de Preço por Marca", x = "Preço", y = "Marca") +
theme_minimal()
ggplotly(boxplot_por_marca)
boxplot_por_marca <- ggplot(data, aes(x = price, y = brand, fill = brand)) +
geom_boxplot() +
labs(title = "Boxplot de Preço por Marca", x = "Preço", y = "Marca") +
theme_minimal()
<- ggplot(data, aes(x = price, y = brand, fill = brand)) +
boxplot_por_marca
boxplot_por_marca <- ggplot(data, aes(x = price, y = brand, fill = brand)) +
geom_boxplot() +
labs(title = "Boxplot de Preço por Marca", x = "Preço", y = "Marca") +
theme_minimal() +
scale_y_continuous(labels = scales::comma)
boxplot_por_marca
boxplot_por_marca
boxplot_por_marca <- ggplot(data, aes(x = price, y = brand, fill = brand)) +
geom_boxplot() +
labs(title = "Boxplot de Preço por Marca", x = "Preço", y = "Marca") +
theme_minimal() +
scale_y_continuous(labels = scales::comma) +  # Formata os rótulos do eixo x com vírgulas
coord_flip()
boxplot_por_marca
boxplot_por_marca <- ggplot(data, aes(x = price, y = brand, fill = brand)) +
geom_boxplot() +
labs(title = "Boxplot de Preço por Marca", x = "Preço", y = "Marca") +
theme_minimal() +
coord_flip() +
scale_y_continuous(labels = scales::comma)
boxplot_por_marca
boxplot_por_marca <- ggplot(data, aes(x = price, y = brand, fill = brand)) +
geom_boxplot() +
labs(title = "Boxplot de Preço por Marca", x = "Preço", y = "Marca") +
theme_minimal()
boxplot_por_marca
criar_boxplot_interativo <- function(data, marca_escolhida) {
# Filtra os dados pela marca escolhida
dados_filtrados <- filter(data, brand == marca_escolhida)
boxplot_por_marca <- ggplot(dados_filtrados, aes(x = "", y = price, fill = brand)) +
geom_boxplot() +
labs(title = paste("Boxplot de Preço para", marca_escolhida), x = NULL, y = "Preço") +
theme_minimal() +
scale_y_continuous(labels = scales::comma)  # Formata os rótulos do eixo y com vírgulas
# Converte o gráfico para um gráfico interativo
boxplot_interativo <- ggplotly(boxplot_por_marca)
return(boxplot_interativo)
}
# Cria a interface interativa
marca_escolhida <- unique(data$brand) # Lista de marcas únicas
marca_dropdown <- list(title = "Escolha a Marca", choices = marca_escolhida) # Dropdown para escolher a marca
# Adiciona o dropdown à interface
interface_interativa <- plotly::plotly_build(
ggplot(data) +
layout(
xaxis = list(title = "Preço"),
yaxis = list(title = "Marca"),
title = "Boxplot Interativo de Preço por Marca"
) +
event_register("plotly_selecting", "plotly_selected") +
add_dropdown(options = list(buttons = marca_dropdown))
)
# Função para criar o boxplot interativo
criar_boxplot_interativo <- function(dados, marca_escolhida) {
# Filtra os dados pela marca escolhida
dados_filtrados <- filter(dados, brand == marca_escolhida)
# Cria o boxplot para a marca escolhida
boxplot_por_marca <- plot_ly(dados_filtrados,
x = ~factor(brand),
y = ~price,
type = "box",
text = ~paste("Marca: ", brand, "<br>Preço: ", price),
hoverinfo = "text") %>%
layout(title = paste("Boxplot de Preço para", marca_escolhida),
xaxis = list(title = "Marca"),
yaxis = list(title = "Preço"))
return(boxplot_por_marca)
}
# Cria a interface interativa
marca_escolhida <- unique(dados$brand) # Lista de marcas únicas
# Função para criar o boxplot interativo
criar_boxplot_interativo <- function(data, marca_escolhida) {
# Filtra os dados pela marca escolhida
dados_filtrados <- filter(data, brand == marca_escolhida)
# Cria o boxplot para a marca escolhida
boxplot_por_marca <- plot_ly(dados_filtrados,
x = ~factor(brand),
y = ~price,
type = "box",
text = ~paste("Marca: ", brand, "<br>Preço: ", price),
hoverinfo = "text") %>%
layout(title = paste("Boxplot de Preço para", marca_escolhida),
xaxis = list(title = "Marca"),
yaxis = list(title = "Preço"))
return(boxplot_por_marca)
}
# Cria a interface interativa
marca_escolhida <- unique(data$brand) # Lista de marcas únicas
marca_dropdown <- list(title = "Escolha a Marca",
options = list(buttons = lapply(marca_escolhida,
function(x) list(label = x,
method = "restyle",
args = list(list(visible = marca_escolhida == x))))))
# Adiciona o dropdown à interface
interface_interativa <- plot_ly(data) %>%
layout(xaxis = list(title = "Preço"),
yaxis = list(title = "Marca"),
title = "Boxplot Interativo de Preço por Marca") %>%
add_dropdown(options = marca_dropdown)
criar_boxplot_interativo <- function(data, marca_escolhida) {
# Filtra os dados pela marca escolhida
dados_filtrados <- filter(data, brand == marca_escolhida)
# Cria o boxplot para a marca escolhida
boxplot_por_marca <- ggplot(dados_filtrados, aes(x = "", y = price, fill = brand)) +
geom_boxplot() +
labs(title = paste("Boxplot de Preço para", marca_escolhida), x = NULL, y = "Preço") +
theme_minimal() +
scale_y_continuous(labels = scales::comma)  # Formata os rótulos do eixo y com vírgulas
# Converte o gráfico para um gráfico interativo
boxplot_interativo <- ggplotly(boxplot_por_marca)
return(boxplot_interativo)
}
dropdown <- list(
title = "Escolha a Marca",
type = "dropdown",
buttons = lapply(marca_escolhida, function(x) {
list(method = "restyle",
args = list("visible", marca_escolhida == x),
label = x)
})
)
grafico_interativo <- ggplotly(
ggplot(data) +
geom_boxplot(aes(x = brand, y = price, fill = brand)) +
labs(title = "Boxplot de Preço por Marca", x = "Marca", y = "Preço") +
theme_minimal() +
scale_y_continuous(labels = scales::comma) +
layout(
updatemenus = list(dropdown)
)
)
grafico_interativo <- plot_ly(
data,
y = ~price,
color = ~brand,
type = "box"
) %>% layout(
title = "Boxplot de Preço por Marca",
xaxis = list(title = "Marca"),
yaxis = list(title = "Preço")
)
# Exibir o gráfico interativo
print(grafico_interativo)
# Exibir o gráfico interativo
print(grafico_interativo)
grafico_interativo <- plot_ly(
data,
y = ~price,
color = ~brand,
type = "box",
showlegend = TRUE
) %>% layout(
title = "Boxplot de Preço por Marca",
xaxis = list(title = "Marca"),
yaxis = list(title = "Preço"),
clickmode = "event"  # Habilita o modo de clique para interatividade
)
# Exibir o gráfico interativo
print(grafico_interativo)
grafico_interativo <- plot_ly(
data,
y = ~price,
color = ~brand,
type = "box"
) %>% layout(
title = "Boxplot de Preço por Marca",
xaxis = list(title = "Marca"),
yaxis = list(title = "Preço")
)
# Exibir o gráfico interativo
print(grafico_interativo)
library(shiny)
ui <- fluidPage(
titlePanel("Boxplot de Preço por Marca"),
sidebarLayout(
sidebarPanel(
selectInput("marca", "Escolha a marca:", choices = unique(data$brand))
),
mainPanel(
plotlyOutput("boxplot")
)
)
)
server <- function(input, output) {
output$boxplot <- renderPlotly({
dados_filtrados <- filter(data, brand == input$marca)
plot_ly(
dados_filtrados,
y = ~price,
type = "box",
color = ~brand
) %>% layout(
title = paste("Boxplot de Preço para", input$marca),
xaxis = list(title = "Marca"),
yaxis = list(title = "Preço")
)
})
}
shinyApp(ui = ui, server = server)
soma_modelos_por_ano<- data %>%
group_by(brand) %>%
summarise(total_modelos_ano = n_distinct(model_year))
soma_modelos_por_ano
soma_modelos_por_marca_ano <- data %>%
group_by(brand, year) %>%
summarise(total_modelos = n_distinct(model))
soma_modelos_por_marca_ano <- data %>%
group_by(brand, model_year) %>%
summarise(total_modelos = n_distinct(model))
# Crie o gráfico de barras interativo
grafico_barras_interativo <- plot_ly(
soma_modelos_por_marca_ano,
x = ~year,
y = ~brand,
z = ~total_modelos,
type = "bar",
orientation = 'h'
) %>% layout(
title = "Número de Modelos por Marca e Ano",
xaxis = list(title = "Ano"),
yaxis = list(title = "Marca"),
barmode = "stack"
)
# Exiba o gráfico interativo
print(grafico_barras_interativo)
soma_modelos_por_marca_ano <- data %>%
group_by(brand, model_year) %>%
summarise(total_modelos = n_distinct(model))
# Crie o gráfico de barras interativo
grafico_barras_interativo <- plot_ly(
soma_modelos_por_marca_ano,
x = ~model_year,
y = ~brand,
z = ~total_modelos,
type = "bar",
orientation = 'h'
) %>% layout(
title = "Número de Modelos por Marca e Ano",
xaxis = list(title = "Ano"),
yaxis = list(title = "Marca"),
barmode = "stack"
)
# Exiba o gráfico interativo
print(grafico_barras_interativo)
# Crie o gráfico de barras interativo
grafico_barras_interativo <- plot_ly(
soma_modelos_por_marca_ano,
x = ~model_year,
y = ~brand,
text = ~paste('Ano: ', year, '<br>Marca: ', brand, '<br>Total de Modelos: ', total_modelos),
type = "bar",
hoverinfo = "text"
) %>% layout(
title = "Número de Modelos por Marca e Ano",
xaxis = list(title = "Ano"),
yaxis = list(title = "Marca")
)
# Exiba o gráfico interativo
print(grafico_barras_interativo)
# Crie o gráfico de barras interativo
grafico_barras_interativo <- plot_ly(
soma_modelos_por_marca_ano,
x = ~model_year,
y = ~brand,
text = ~paste('Ano: ', model_year, '<br>Marca: ', brand, '<br>Total de Modelos: ', total_modelos),
type = "bar",
hoverinfo = "text"
) %>% layout(
title = "Número de Modelos por Marca e Ano",
xaxis = list(title = "Ano"),
yaxis = list(title = "Marca")
)
# Exiba o gráfico interativo
print(grafico_barras_interativo)
